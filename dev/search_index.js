var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"Reference","title":"API","text":"","category":"section"},{"location":"api/","page":"Reference","title":"Reference","text":"Modules = [ Discorder ]","category":"page"},{"location":"api/","page":"Reference","title":"Reference","text":"Modules = [ Discorder ]","category":"page"},{"location":"api/#Discorder.AbstractEventPublisher","page":"Reference","title":"Discorder.AbstractEventPublisher","text":"AbstractEventPublisher\n\nAn interface for publishing gateway events.\n\n\n\n\n\n","category":"type"},{"location":"api/#Discorder.AbstractTrigger","page":"Reference","title":"Discorder.AbstractTrigger","text":"AbstractTrigger\n\nA trigger is used to represent data that can be used to determine whether an event handler should be fired. For example, a regex-based command trigger may store a Regex object that can be used to match messages.\n\n\n\n\n\n","category":"type"},{"location":"api/#Discorder.CommandTrigger","page":"Reference","title":"Discorder.CommandTrigger","text":"CommandTrigger\n\nA regex-based trigger that matches a message pattern.\n\n\n\n\n\n","category":"type"},{"location":"api/#Discorder.Event","page":"Reference","title":"Discorder.Event","text":"Event\n\nA gateway event.\n\n\n\n\n\n","category":"type"},{"location":"api/#Discorder.GatewayTracker","page":"Reference","title":"Discorder.GatewayTracker","text":"GatewayTracker\n\nGatewayTracker is a stateful object used by the Control Pane.\n\n\n\n\n\n","category":"type"},{"location":"api/#Discorder.ReactionAddTrigger","page":"Reference","title":"Discorder.ReactionAddTrigger","text":"ReactionAddTrigger\n\nA trigger that is fired when a reaction is added to a message.\n\n\n\n\n\n","category":"type"},{"location":"api/#Discorder.add_group_dm_recipient","page":"Reference","title":"Discorder.add_group_dm_recipient","text":"add_group_dm_recipient(client, channel_id, user_id; kwargs...) -> Nothing\n\nMake a PUT request to /channels/<channel_id>/recipients/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.add_guild_member","page":"Reference","title":"Discorder.add_guild_member","text":"add_guild_member(client, guild_id, user_id; kwargs...) -> GuildMember\n\nMake a PUT request to /guilds/<guild_id>/members/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.add_guild_member_role","page":"Reference","title":"Discorder.add_guild_member_role","text":"add_guild_member_role(client, guild_id, user_id, role_id) -> Nothing\n\nMake a PUT request to /guilds/<guild_id>/members/<user_id>/roles/<role_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.add_thread_member","page":"Reference","title":"Discorder.add_thread_member","text":"add_thread_member(client, channel_id, user_id) -> Nothing\n\nMake a PUT request to /channels/<channel_id>/thread-members/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.begin_guild_prune","page":"Reference","title":"Discorder.begin_guild_prune","text":"begin_guild_prune(client, guild_id; kwargs...) -> PruneCount\n\nMake a POST request to /guilds/<guild_id>/prune. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.bulk_delete_messages","page":"Reference","title":"Discorder.bulk_delete_messages","text":"bulk_delete_messages(client, channel_id; kwargs...) -> Nothing\n\nMake a POST request to /channels/<channel_id>/messages/bulk-delete. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_channel_invite","page":"Reference","title":"Discorder.create_channel_invite","text":"create_channel_invite(client, channel_id; kwargs...) -> Invite\n\nMake a POST request to /channels/<channel_id>/invites. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_dm","page":"Reference","title":"Discorder.create_dm","text":"create_dm(client; kwargs...) -> DiscordChannel\n\nMake a POST request to /users/@me/channels. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_event-Tuple{GatewayTracker, AbstractString, Union{Nothing, AbstractString}}","page":"Reference","title":"Discorder.create_event","text":"create_event_object(tracker::GatewayTracker, event_type::AbstractString, json::Optional{Abstract)\n\nCreate an event object by parsing the gateway event as JSON string.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.create_group_dm","page":"Reference","title":"Discorder.create_group_dm","text":"create_group_dm(client; kwargs...) -> DiscordChannel\n\nMake a POST request to /users/@me/channels. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_guild","page":"Reference","title":"Discorder.create_guild","text":"create_guild(client; kwargs...) -> Guild\n\nMake a POST request to /guilds. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_guild_ban","page":"Reference","title":"Discorder.create_guild_ban","text":"create_guild_ban(client, guild_id, user_id; kwargs...) -> Nothing\n\nMake a PUT request to /guilds/<guild_id>/bans/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_guild_channel","page":"Reference","title":"Discorder.create_guild_channel","text":"create_guild_channel(client, guild_id; kwargs...) -> DiscordChannel\n\nMake a POST request to /guilds/<guild_id>/channels. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_guild_emoji","page":"Reference","title":"Discorder.create_guild_emoji","text":"create_guild_emoji(client, guild_id; kwargs...) -> Emoji\n\nMake a POST request to /guilds/<guild_id>/emojis. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_guild_from_guild_template","page":"Reference","title":"Discorder.create_guild_from_guild_template","text":"create_guild_from_guild_template(client, template_code; kwargs...) -> Guild\n\nMake a POST request to /guilds/templates/<template_code>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_guild_role","page":"Reference","title":"Discorder.create_guild_role","text":"create_guild_role(client, guild_id; kwargs...) -> Role\n\nMake a POST request to /guilds/<guild_id>/roles. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_guild_scheduled_event","page":"Reference","title":"Discorder.create_guild_scheduled_event","text":"create_guild_scheduled_event(client, guild_id; kwargs...) -> GuildScheduledEvent\n\nMake a POST request to /guilds/<guild_id>/scheduled-events. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_guild_template","page":"Reference","title":"Discorder.create_guild_template","text":"create_guild_template(client, guild_id; kwargs...) -> GuildTemplate\n\nMake a POST request to /guilds/<guild_id>/templates. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_guild_ticker","page":"Reference","title":"Discorder.create_guild_ticker","text":"create_guild_ticker(client, guild_id; kwargs...) -> Sticker\n\nMake a POST request to /guilds/<guild_id>/stickers. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_message","page":"Reference","title":"Discorder.create_message","text":"create_message(client, channel_id; kwargs...) -> Message\n\nMake a POST request to /channels/<channel_id>/messages. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_reaction","page":"Reference","title":"Discorder.create_reaction","text":"create_reaction(client, channel_id, message_id, emoji) -> Nothing\n\nMake a PUT request to /channels/<channel_id>/messages/<message_id>/reactions/<emoji>/@me. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_stage_instance","page":"Reference","title":"Discorder.create_stage_instance","text":"create_stage_instance(client; kwargs...) -> StageInstance\n\nMake a POST request to /stage-instances. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.create_webhook","page":"Reference","title":"Discorder.create_webhook","text":"create_webhook(client, channel_id; kwargs...) -> Webhook\n\nMake a POST request to /channels/<channel_id>/webhooks. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.crosspost_message","page":"Reference","title":"Discorder.crosspost_message","text":"crosspost_message(client, channel_id, message_id) -> Message\n\nMake a POST request to /channels/<channel_id>/messages/<message_id>/crosspost. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_all_reactions","page":"Reference","title":"Discorder.delete_all_reactions","text":"delete_all_reactions(client, channel_id, message_id) -> Nothing\n\nMake a DELETE request to /channels/<channel_id>/messages/<message_id>/reactions. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_all_reactions_for_emoji","page":"Reference","title":"Discorder.delete_all_reactions_for_emoji","text":"delete_all_reactions_for_emoji(client, channel_id, message_id, emoji) -> Nothing\n\nMake a DELETE request to /channels/<channel_id>/messages/<message_id>/reactions/<emoji>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_channel","page":"Reference","title":"Discorder.delete_channel","text":"delete_channel(client, channel_id) -> DiscordChannel\n\nMake a DELETE request to /channels/<channel_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_channel_permission","page":"Reference","title":"Discorder.delete_channel_permission","text":"delete_channel_permission(client, channel_id, overwrite) -> Nothing\n\nMake a DELETE request to /channels/<channel_id>/permissions/<overwrite>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_guild","page":"Reference","title":"Discorder.delete_guild","text":"delete_guild(client, guild_id) -> Nothing\n\nMake a DELETE request to /guilds/<guild_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_guild_emoji","page":"Reference","title":"Discorder.delete_guild_emoji","text":"delete_guild_emoji(client, guild_id, emoji) -> Nothing\n\nMake a DELETE request to /guilds/<guild_id>/emojis/<emoji>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_guild_integration","page":"Reference","title":"Discorder.delete_guild_integration","text":"delete_guild_integration(client, guild_id, integration_id) -> Nothing\n\nMake a DELETE request to /guilds/<guild_id>/integrations/<integration_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_guild_role","page":"Reference","title":"Discorder.delete_guild_role","text":"delete_guild_role(client, guild_id, role_id) -> Nothing\n\nMake a DELETE request to /guilds/<guild_id>/roles/<role_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_guild_scheduled_event","page":"Reference","title":"Discorder.delete_guild_scheduled_event","text":"delete_guild_scheduled_event(client, guild_id, guild_scheduled_event_id) -> Nothing\n\nMake a DELETE request to /guilds/<guild_id>/scheduled-events/<guild_scheduled_event_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_guild_sticker","page":"Reference","title":"Discorder.delete_guild_sticker","text":"delete_guild_sticker(client, guild_id, sticker_id) -> Nothing\n\nMake a DELETE request to /guilds/<guild_id>/stickers/<sticker_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_guild_template","page":"Reference","title":"Discorder.delete_guild_template","text":"delete_guild_template(client, guild_id, template_code) -> GuildTemplate\n\nMake a DELETE request to /guilds/<guild_id>/templates/<template_code>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_invite","page":"Reference","title":"Discorder.delete_invite","text":"delete_invite(client, invite_code) -> Invite\n\nMake a DELETE request to /invites/<invite_code>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_message","page":"Reference","title":"Discorder.delete_message","text":"delete_message(client, channel_id, message_id) -> Nothing\n\nMake a DELETE request to /channels/<channel_id>/messages/<message_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_own_reaction","page":"Reference","title":"Discorder.delete_own_reaction","text":"delete_own_reaction(client, channel_id, message_id, emoji) -> Nothing\n\nMake a DELETE request to /channels/<channel_id>/messages/<message_id>/reactions/<emoji>/@me. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_stage_instance","page":"Reference","title":"Discorder.delete_stage_instance","text":"delete_stage_instance(client) -> Nothing\n\nMake a DELETE request to /stage-instances/{channel.id}. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_user_reaction","page":"Reference","title":"Discorder.delete_user_reaction","text":"delete_user_reaction(client, channel_id, message_id, emoji, user_id) -> Nothing\n\nMake a DELETE request to /channels/<channel_id>/messages/<message_id>/reactions/<emoji>/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_webhook","page":"Reference","title":"Discorder.delete_webhook","text":"delete_webhook(client, webhook_id; kwargs...) -> Webhook\n\nMake a DELETE request to /webhooks/<webhook_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_webhook_message","page":"Reference","title":"Discorder.delete_webhook_message","text":"delete_webhook_message(client, webhook_id, webhook_tokenb, message_id; kwargs...) -> Nothing\n\nMake a DELETE request to /webhooks/<webhook_id>/<webhook_tokenb>/messages/<message_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.delete_webhook_with_token","page":"Reference","title":"Discorder.delete_webhook_with_token","text":"delete_webhook_with_token(client, webhook_id, webhook_token; kwargs...) -> Webhook\n\nMake a DELETE request to /webhooks/<webhook_id>/<webhook_token>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.edit_channel_permissions","page":"Reference","title":"Discorder.edit_channel_permissions","text":"edit_channel_permissions(client, channel_id, overwrite; kwargs...) -> Nothing\n\nMake a PUT request to /channels/<channel_id>/permissions/<overwrite>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.edit_message","page":"Reference","title":"Discorder.edit_message","text":"edit_message(client, channel_id, message_id; kwargs...) -> Message\n\nMake a PATCH request to /channels/<channel_id>/messages/<message_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.edit_webhook_message","page":"Reference","title":"Discorder.edit_webhook_message","text":"edit_webhook_message(client, webhook_id, webhook_tokenb, message_id; kwargs...) -> Message\n\nMake a PATCH request to /webhooks/<webhook_id>/<webhook_tokenb>/messages/<message_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.execute_github_compatible_webhook","page":"Reference","title":"Discorder.execute_github_compatible_webhook","text":"execute_github_compatible_webhook(client, webhook_id, webhook_token; wait=true, kwargs...) -> Message\n\nMake a POST request to /webhooks/<webhook_id>/<webhook_token>/github. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.execute_slack_compatible_webhook","page":"Reference","title":"Discorder.execute_slack_compatible_webhook","text":"execute_slack_compatible_webhook(client, webhook_id, webhook_token; wait=true, kwargs...) -> Message\n\nMake a POST request to /webhooks/<webhook_id>/<webhook_token>/slack. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.execute_webhook","page":"Reference","title":"Discorder.execute_webhook","text":"execute_webhook(client, webhook_id, webhook_token; wait=true, kwargs...) -> Message\n\nMake a POST request to /webhooks/<webhook_id>/<webhook_token>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.follow_news_channel","page":"Reference","title":"Discorder.follow_news_channel","text":"follow_news_channel(client, channel_id; kwargs...) -> FollowedChannel\n\nMake a POST request to /channels/<channel_id>/followers. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_bot_token-Tuple{}","page":"Reference","title":"Discorder.get_bot_token","text":"get_bot_token()\n\nGet the bot token from enviornment variable DISCORD_BOT_TOKEN.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.get_channel","page":"Reference","title":"Discorder.get_channel","text":"get_channel(client, channel_id; kwargs...) -> DiscordChannel\n\nMake a GET request to /channels/<channel_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_channel_invites","page":"Reference","title":"Discorder.get_channel_invites","text":"get_channel_invites(client, channel_id; kwargs...) -> Vector{Invite}\n\nMake a GET request to /channels/<channel_id>/invites. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_channel_message","page":"Reference","title":"Discorder.get_channel_message","text":"get_channel_message(client, channel_id, message_id) -> Message\n\nMake a GET request to /channels/<channel_id>/messages/<message_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_channel_messages","page":"Reference","title":"Discorder.get_channel_messages","text":"get_channel_messages(client, channel_id; kwargs...) -> Vector{Message}\n\nMake a GET request to /channels/<channel_id>/messages. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_channel_webhooks","page":"Reference","title":"Discorder.get_channel_webhooks","text":"get_channel_webhooks(client, channel_id) -> Vector{Webhook}\n\nMake a GET request to /channels/<channel_id>/webhooks. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_current_user","page":"Reference","title":"Discorder.get_current_user","text":"get_current_user(client) -> User\n\nMake a GET request to /users/@me. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_current_user_guild_member","page":"Reference","title":"Discorder.get_current_user_guild_member","text":"get_current_user_guild_member(client) -> GuildMember\n\nMake a GET request to /users/@me/guilds/{guild.id}/member. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_current_user_guilds","page":"Reference","title":"Discorder.get_current_user_guilds","text":"get_current_user_guilds(client; kwargs...) -> Vector{Guild}\n\nMake a GET request to /users/@me/guilds. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_gateway","page":"Reference","title":"Discorder.get_gateway","text":"get_gateway(client) -> Gateway\n\nMake a GET request to /gateway. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild","page":"Reference","title":"Discorder.get_guild","text":"get_guild(client, guild_id; kwargs...) -> Guild\n\nMake a GET request to /guilds/<guild_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_audit_log","page":"Reference","title":"Discorder.get_guild_audit_log","text":"get_guild_audit_log(client, guild_id; kwargs...) -> AuditLog\n\nMake a GET request to /guilds/<guild_id>/audit-logs. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_ban","page":"Reference","title":"Discorder.get_guild_ban","text":"get_guild_ban(client, guild_id, user_id) -> Ban\n\nMake a GET request to /guilds/<guild_id>/bans/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_bans","page":"Reference","title":"Discorder.get_guild_bans","text":"get_guild_bans(client, guild_id) -> Vector{Guild}\n\nMake a GET request to /guilds/<guild_id>/bans. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_channels","page":"Reference","title":"Discorder.get_guild_channels","text":"get_guild_channels(client, guild_id) -> Vector{DiscordChannel}\n\nMake a GET request to /guilds/<guild_id>/channels. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_emoji","page":"Reference","title":"Discorder.get_guild_emoji","text":"get_guild_emoji(client, guild_id, emoji) -> Emoji\n\nMake a GET request to /guilds/<guild_id>/emojis/<emoji>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_integrations","page":"Reference","title":"Discorder.get_guild_integrations","text":"get_guild_integrations(client, guild_id) -> Vector{Integration}\n\nMake a GET request to /guilds/<guild_id>/integrations. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_invites","page":"Reference","title":"Discorder.get_guild_invites","text":"get_guild_invites(client, guild_id) -> Vector{Invite}\n\nMake a GET request to /guilds/<guild_id>/invites. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_member","page":"Reference","title":"Discorder.get_guild_member","text":"get_guild_member(client, guild_id, user_id) -> GuildMember\n\nMake a GET request to /guilds/<guild_id>/members/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_preview","page":"Reference","title":"Discorder.get_guild_preview","text":"get_guild_preview(client, guild_id) -> Guild\n\nMake a GET request to /guilds/<guild_id>/preview. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_prune_count","page":"Reference","title":"Discorder.get_guild_prune_count","text":"get_guild_prune_count(client, guild_id; kwargs...) -> PruneCount\n\nMake a GET request to /guilds/<guild_id>/prune. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_roles","page":"Reference","title":"Discorder.get_guild_roles","text":"get_guild_roles(client, guild_id) -> Vector{Role}\n\nMake a GET request to /guilds/<guild_id>/roles. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_scheduled_event","page":"Reference","title":"Discorder.get_guild_scheduled_event","text":"get_guild_scheduled_event(client, guild_id, guild_scheduled_event_id; kwargs...) -> GuildScheduledEvent\n\nMake a GET request to /guilds/<guild_id>/scheduled-events/<guild_scheduled_event_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_scheduled_event_users","page":"Reference","title":"Discorder.get_guild_scheduled_event_users","text":"get_guild_scheduled_event_users(client, guild_id, guild_scheduled_event_id; kwargs...) -> Vector{GuildScheduledEventUser}\n\nMake a GET request to /guilds/<guild_id>/scheduled-events/<guild_scheduled_event_id>/users. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_sticker","page":"Reference","title":"Discorder.get_guild_sticker","text":"get_guild_sticker(client, guild_id, sticker_id) -> Sticker\n\nMake a GET request to /guilds/<guild_id>/stickers/<sticker_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_template","page":"Reference","title":"Discorder.get_guild_template","text":"get_guild_template(client, template_code) -> GuildTemplate\n\nMake a GET request to /guilds/templates/<template_code>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_templates","page":"Reference","title":"Discorder.get_guild_templates","text":"get_guild_templates(client, guild_id) -> Vector{GuildTemplate}\n\nMake a GET request to /guilds/<guild_id>/templates. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_vanity_url","page":"Reference","title":"Discorder.get_guild_vanity_url","text":"get_guild_vanity_url(client, guild_id) -> Invite\n\nMake a GET request to /guilds/<guild_id>/vanity-url. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_voice_regions","page":"Reference","title":"Discorder.get_guild_voice_regions","text":"get_guild_voice_regions(client, guild_id) -> Vector{VoiceRegion}\n\nMake a GET request to /guilds/<guild_id>/regions. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_webhooks","page":"Reference","title":"Discorder.get_guild_webhooks","text":"get_guild_webhooks(client, guild_id) -> Vector{Webhook}\n\nMake a GET request to /guilds/<guild_id>/webhooks. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_welcome_screen","page":"Reference","title":"Discorder.get_guild_welcome_screen","text":"get_guild_welcome_screen(client, guild_id; kwargs...) -> WelcomeScreen\n\nMake a GET request to /guilds/<guild_id>/welcome-screen. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_widget","page":"Reference","title":"Discorder.get_guild_widget","text":"get_guild_widget(client, guild_id) -> GuildWidget\n\nMake a GET request to /guilds/<guild_id>/widget.json. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_widget_image","page":"Reference","title":"Discorder.get_guild_widget_image","text":"get_guild_widget_image(client, guild_id) -> String\n\nMake a GET request to /guilds/<guild_id>/widget.png. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_guild_widget_settings","page":"Reference","title":"Discorder.get_guild_widget_settings","text":"get_guild_widget_settings(client, guild_id) -> GuildWidgetSettings\n\nMake a GET request to /guilds/<guild_id>/widget. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_invite","page":"Reference","title":"Discorder.get_invite","text":"get_invite(client, invite_code; kwargs...) -> Invite\n\nMake a GET request to /invites/<invite_code>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_logger-Tuple{Any}","page":"Reference","title":"Discorder.get_logger","text":"get_logger(filename; debug::Bool)\n\nReturn a custom logger that write to the specified log file. A timestamp is automatically injected.\n\nArguments\n\nfile_path: path of log file\n\nKeyword arguments\n\ndebug: turn on debug logging (default = false)\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.get_pinned_messages","page":"Reference","title":"Discorder.get_pinned_messages","text":"get_pinned_messages(client, channel_id) -> Vector{Message}\n\nMake a GET request to /channels/<channel_id>/pins. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_reactions","page":"Reference","title":"Discorder.get_reactions","text":"get_reactions(client, channel_id, message_id, emoji; kwargs...) -> Vector{User}\n\nMake a GET request to /channels/<channel_id>/messages/<message_id>/reactions/<emoji>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_stage_instance","page":"Reference","title":"Discorder.get_stage_instance","text":"get_stage_instance(client) -> StageInstance\n\nMake a GET request to /stage-instances/{channel.id}. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_sticker","page":"Reference","title":"Discorder.get_sticker","text":"get_sticker(client, sticker_id) -> Sticker\n\nMake a GET request to /stickers/<sticker_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_thread_member","page":"Reference","title":"Discorder.get_thread_member","text":"get_thread_member(client, channel_id, user_id) -> ThreadMember\n\nMake a GET request to /channels/<channel_id>/thread-members/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_user","page":"Reference","title":"Discorder.get_user","text":"get_user(client, user_id) -> User\n\nMake a GET request to /users/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_user_connections","page":"Reference","title":"Discorder.get_user_connections","text":"get_user_connections(client) -> Vector{Connection}\n\nMake a GET request to /users/@me/connections. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_webhook","page":"Reference","title":"Discorder.get_webhook","text":"get_webhook(client, webhook_id) -> Webhook\n\nMake a GET request to /webhooks/<webhook_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_webhook_message","page":"Reference","title":"Discorder.get_webhook_message","text":"get_webhook_message(client, webhook_id, webhook_tokenb, message_id; kwargs...) -> Message\n\nMake a GET request to /webhooks/<webhook_id>/<webhook_tokenb>/messages/<message_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.get_webhook_with_token","page":"Reference","title":"Discorder.get_webhook_with_token","text":"get_webhook_with_token(client, webhook_id, webhook_token) -> Webhook\n\nMake a GET request to /webhooks/<webhook_id>/<webhook_token>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.join_thread","page":"Reference","title":"Discorder.join_thread","text":"join_thread(client, channel_id) -> Nothing\n\nMake a PUT request to /channels/<channel_id>/thread-members/@me. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.json-Tuple{Discorder.AbstractDiscordObject}","page":"Reference","title":"Discorder.json","text":"Convert object to JSON formatted string.\n\nFields with missing values are excluded.\nFields with nothing values are included as null.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.leave_guild","page":"Reference","title":"Discorder.leave_guild","text":"leave_guild(client, guild_id) -> Nothing\n\nMake a DELETE request to /users/@me/guilds/<guild_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.leave_thread","page":"Reference","title":"Discorder.leave_thread","text":"leave_thread(client, channel_id) -> Nothing\n\nMake a DELETE request to /channels/<channel_id>/thread-members/@me. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_active_guild_threads","page":"Reference","title":"Discorder.list_active_guild_threads","text":"list_active_guild_threads(client, guild_id) -> Nothing\n\nMake a GET request to /guilds/<guild_id>/threads/active. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_guild_emojis","page":"Reference","title":"Discorder.list_guild_emojis","text":"list_guild_emojis(client, guild_id) -> Vector{Emoji}\n\nMake a GET request to /guilds/<guild_id>/emojis. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_guild_members","page":"Reference","title":"Discorder.list_guild_members","text":"list_guild_members(client, guild_id; kwargs...) -> Vector{GuildMember}\n\nMake a GET request to /guilds/<guild_id>/members. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_guild_scheduled_events","page":"Reference","title":"Discorder.list_guild_scheduled_events","text":"list_guild_scheduled_events(client, guild_id; kwargs...) -> Vector{GuildScheduledEvent}\n\nMake a GET request to /guilds/<guild_id>/scheduled-events. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_guild_stickers","page":"Reference","title":"Discorder.list_guild_stickers","text":"list_guild_stickers(client, guild_id) -> Vector{Sticker}\n\nMake a GET request to /guilds/<guild_id>/stickers. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_joined_private_archived_threads","page":"Reference","title":"Discorder.list_joined_private_archived_threads","text":"list_joined_private_archived_threads(client, channel_id; kwargs...) -> ArchivedThread\n\nMake a GET request to /channels/<channel_id>/users/@me/threads/archived/private. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_nitro_sticker_packs","page":"Reference","title":"Discorder.list_nitro_sticker_packs","text":"list_nitro_sticker_packs(client) -> Vector{Sticker}\n\nMake a GET request to /sticker-packs. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_private_archived_threads","page":"Reference","title":"Discorder.list_private_archived_threads","text":"list_private_archived_threads(client, channel_id; kwargs...) -> ArchivedThread\n\nMake a GET request to /channels/<channel_id>/threads/archived/private. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_public_archived_threads","page":"Reference","title":"Discorder.list_public_archived_threads","text":"list_public_archived_threads(client, channel_id; kwargs...) -> ArchivedThread\n\nMake a GET request to /channels/<channel_id>/threads/archived/public. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_thread_members","page":"Reference","title":"Discorder.list_thread_members","text":"list_thread_members(client, channel_id) -> Vector{ThreadMember}\n\nMake a GET request to /channels/<channel_id>/thread-members. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.list_voice_regions","page":"Reference","title":"Discorder.list_voice_regions","text":"list_voice_regions(client) -> Vector{VoiceRegion}\n\nMake a GET request to /voice/regions. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_channel","page":"Reference","title":"Discorder.modify_channel","text":"modify_channel(client, channel_id; kwargs...) -> DiscordChannel\n\nMake a PATCH request to /channels/<channel_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_current_member","page":"Reference","title":"Discorder.modify_current_member","text":"modify_current_member(client, guild_id; kwargs...) -> Nothing\n\nMake a PATCH request to /guilds/<guild_id>/members/@me. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_current_user","page":"Reference","title":"Discorder.modify_current_user","text":"modify_current_user(client; kwargs...) -> User\n\nMake a PATCH request to /users/@me. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_current_user_nick","page":"Reference","title":"Discorder.modify_current_user_nick","text":"modify_current_user_nick(client, guild_id; kwargs...) -> UserNickChange\n\nMake a PATCH request to /guilds/<guild_id>/members/@me/nick. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_current_user_voice_state","page":"Reference","title":"Discorder.modify_current_user_voice_state","text":"modify_current_user_voice_state(client, guild_id; kwargs...) -> Nothing\n\nMake a PATCH request to /guilds/<guild_id>/voice-states/@me. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild","page":"Reference","title":"Discorder.modify_guild","text":"modify_guild(client, guild_id; kwargs...) -> Guild\n\nMake a PATCH request to /guilds/<guild_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild_channel_positions","page":"Reference","title":"Discorder.modify_guild_channel_positions","text":"modify_guild_channel_positions(client, guild_id; positions) -> Nothing\n\nMake a PATCH request to /guilds/<guild_id>/channels. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild_emoji","page":"Reference","title":"Discorder.modify_guild_emoji","text":"modify_guild_emoji(client, guild_id, emoji; kwargs...) -> Emoji\n\nMake a PATCH request to /guilds/<guild_id>/emojis/<emoji>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild_member","page":"Reference","title":"Discorder.modify_guild_member","text":"modify_guild_member(client, guild_id, user_id; kwargs...) -> Nothing\n\nMake a PATCH request to /guilds/<guild_id>/members/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild_role","page":"Reference","title":"Discorder.modify_guild_role","text":"modify_guild_role(client, guild_id, role_id; kwargs...) -> Role\n\nMake a PATCH request to /guilds/<guild_id>/roles/<role_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild_role_positions","page":"Reference","title":"Discorder.modify_guild_role_positions","text":"modify_guild_role_positions(client, guild_id; positions) -> Vector{Role}\n\nMake a PATCH request to /guilds/<guild_id>/roles. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild_scheduled_event","page":"Reference","title":"Discorder.modify_guild_scheduled_event","text":"modify_guild_scheduled_event(client, guild_id, guild_scheduled_event_id; kwargs...) -> GuildScheduledEvent\n\nMake a PATCH request to /guilds/<guild_id>/scheduled-events/<guild_scheduled_event_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild_sticker","page":"Reference","title":"Discorder.modify_guild_sticker","text":"modify_guild_sticker(client, guild_id, sticker_id; kwargs...) -> Sticker\n\nMake a PATCH request to /guilds/<guild_id>/stickers/<sticker_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild_template","page":"Reference","title":"Discorder.modify_guild_template","text":"modify_guild_template(client, guild_id, template_code; kwargs...) -> GuildTemplate\n\nMake a PATCH request to /guilds/<guild_id>/templates/<template_code>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild_welcome_screen","page":"Reference","title":"Discorder.modify_guild_welcome_screen","text":"modify_guild_welcome_screen(client, guild_id; kwargs...) -> WelcomeScreen\n\nMake a PATCH request to /guilds/<guild_id>/welcome-screen. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_guild_widget","page":"Reference","title":"Discorder.modify_guild_widget","text":"modify_guild_widget(client, guild_id; kwargs...) -> GuildWidget\n\nMake a PATCH request to /guilds/<guild_id>/widget. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_stage_instance","page":"Reference","title":"Discorder.modify_stage_instance","text":"modify_stage_instance(client; kwargs...) -> StageInstance\n\nMake a PATCH request to /stage-instances/{channel.id}. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_user_voice_state","page":"Reference","title":"Discorder.modify_user_voice_state","text":"modify_user_voice_state(client, guild_id, user_id; kwargs...) -> Nothing\n\nMake a PATCH request to /guilds/<guild_id>/voice-states/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_webhook","page":"Reference","title":"Discorder.modify_webhook","text":"modify_webhook(client, webhook_id; kwargs...) -> Webhook\n\nMake a PATCH request to /webhooks/<webhook_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.modify_webhook_with_token","page":"Reference","title":"Discorder.modify_webhook_with_token","text":"modify_webhook_with_token(client, webhook_id, webhook_token; kwargs...) -> Webhook\n\nMake a PATCH request to /webhooks/<webhook_id>/<webhook_token>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.pin_message","page":"Reference","title":"Discorder.pin_message","text":"pin_message(client, channel_id, message_id) -> Nothing\n\nMake a PUT request to /channels/<channel_id>/pins/<message_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.publish-Tuple{Discorder.AbstractEventPublisher, Discorder.Event}","page":"Reference","title":"Discorder.publish","text":"publish(publisher::AbstractEventPublisher, event::Event)\n\nPublish an event via the provided event publisher.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.remove_group_dm_recipient","page":"Reference","title":"Discorder.remove_group_dm_recipient","text":"remove_group_dm_recipient(client, channel_id, user_id) -> Nothing\n\nMake a DELETE request to /channels/<channel_id>/recipients/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.remove_guild_ban","page":"Reference","title":"Discorder.remove_guild_ban","text":"remove_guild_ban(client, guild_id, user_id) -> Nothing\n\nMake a DELETE request to /guilds/<guild_id>/bans/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.remove_guild_member","page":"Reference","title":"Discorder.remove_guild_member","text":"remove_guild_member(client, guild_id, user_id) -> Nothing\n\nMake a DELETE request to /guilds/<guild_id>/members/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.remove_guild_member_role","page":"Reference","title":"Discorder.remove_guild_member_role","text":"remove_guild_member_role(client, guild_id, user_id, role_id) -> Nothing\n\nMake a DELETE request to /guilds/<guild_id>/members/<user_id>/roles/<role_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.remove_thread_member","page":"Reference","title":"Discorder.remove_thread_member","text":"remove_thread_member(client, channel_id, user_id) -> Nothing\n\nMake a DELETE request to /channels/<channel_id>/thread-members/<user_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.safe_parse_json-Tuple{GatewayTracker, AbstractString, DataType}","page":"Reference","title":"Discorder.safe_parse_json","text":"safe_parse_json(tracker::GatewayTracker, json::AbstractString, T::DataType)\n\nParse a JSON string into an expected type T, which is configured using StructType traits. Returns nothing if the string cannot be parsed for some reasons. Throw exception only during fail_on_error mode.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.safe_wait-Tuple{GatewayTracker, Any, Any}","page":"Reference","title":"Discorder.safe_wait","text":"safe_wait(task::Optional{Task})\n\nWait for a task for finish synchronously. Unlike wait, it is meant to be safe and never throw, except during fail_on_error mode. Always return nothing.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.sanitize-Tuple{AbstractString}","page":"Reference","title":"Discorder.sanitize","text":"sanitize(s::AbstractString)\n\nRemove sensitive information such as Bot token.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.search_guild_members","page":"Reference","title":"Discorder.search_guild_members","text":"search_guild_members(client, guild_id; kwargs...) -> Vector{GuildMember}\n\nMake a GET request to /guilds/<guild_id>/members/search. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.serve-Tuple{}","page":"Reference","title":"Discorder.serve","text":"serve(;\n    client::BotClient=BotClient(),\n    tracker_ref=Ref{GatewayTracker}(),\n    config_file_path::Optional{AbstractString}=nothing,\n)\n\nRun control plane in a loop so that we can actually auto-recover when bad things happen.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.should_trigger","page":"Reference","title":"Discorder.should_trigger","text":"Return a vector of arguments that is passed to the user function when triggered, or nothing if the trigger should not be fired.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.show_error-Tuple{Exception}","page":"Reference","title":"Discorder.show_error","text":"show_error(ex::Exception)\n\nDisplay an error in the log with backtrace. This is usefulf for debugging purpose.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.start_control_plane-Tuple{BotClient, Any}","page":"Reference","title":"Discorder.start_control_plane","text":"start_control_plane(client::BotClient, config)\n\nStart new control plane and return a GatewayTracker object.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.start_thread_from_message","page":"Reference","title":"Discorder.start_thread_from_message","text":"start_thread_from_message(client, channel_id, message_id; kwargs...) -> DiscordChannel\n\nMake a POST request to /channels/<channel_id>/messages/<message_id>/threads. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.start_thread_without_message","page":"Reference","title":"Discorder.start_thread_without_message","text":"start_thread_without_message(client, channel_id; kwargs...) -> DiscordChannel\n\nMake a POST request to /channels/<channel_id>/threads. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.sync_guild_template","page":"Reference","title":"Discorder.sync_guild_template","text":"sync_guild_template(client, guild_id, template_code) -> GuildTemplate\n\nMake a PUT request to /guilds/<guild_id>/templates/<template_code>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.trigger_typing_indicator","page":"Reference","title":"Discorder.trigger_typing_indicator","text":"trigger_typing_indicator(client, channel_id) -> Nothing\n\nMake a POST request to /channels/<channel_id>/typing. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.unpin_message","page":"Reference","title":"Discorder.unpin_message","text":"unpin_message(client, channel_id, message_id) -> Nothing\n\nMake a DELETE request to /channels/<channel_id>/pins/<message_id>. See the Discord API documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Discorder.waterfall-Tuple{Function, Any}","page":"Reference","title":"Discorder.waterfall","text":"waterfall(f, xs)\n\nApply function f to each element of collection xs iteratively and return the very first application where no exception was thrown. If every application throws exception then the last exception is re-thrown.\n\n\n\n\n\n","category":"method"},{"location":"api/#Discorder.@discord_object-Tuple{Any}","page":"Reference","title":"Discorder.@discord_object","text":"Define a Discord resource.\n\n\n\n\n\n","category":"macro"},{"location":"control_plane/#Control-Plane","page":"Control Plane Design","title":"Control Plane","text":"","category":"section"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"The control plane is a critical design component that powers the gateway interface. It maintains the state of the various async processes that interacts with Discord and provides an easy-to-use API to manage the lifecyle of these processes.","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"The gateway interface is implemented as multiple concurrent async processes:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"Heartbeat task is an infinite loop that keeps sending heartbeat messages to the Discord server as part fo the gateway protocol. The elapsed time between each heartbeat is determined by an elapsed time value suggested by Discord server with a random jitter.\nProcessor task is an infinite loop that listens to messages coming from the gateway via a websocket connection. Messages include heartbeat acknowledgement messages as well as all other gateway events.\nDoctor task is an infinite loop that monitors the health of heartbeat and processor tasks. If any of those tasks are broken then it will attempt to shut down both tasks and the control plane will restart everything automatically.\nMaster task is the one that starts Heartbeat, Processor, and Doctor tasks. It just waits until those tasks to finish.","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"The control plane normally runs in a loop. Suppose that the websocket connection got dropped for some reasons. The Doctor task detects the problem and decided that the system is not healthy. So, all tasks are shut down and the Master task also finishes. Then, the control plane starts everything all over again with a brand new connection to Discord. This design is intentionally made simple – rather than attempting to recover individual failing components, it just restarts the entire thing.","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"The fail_on_error flag is a special configuration parameter that changes the behavior of this loop. Rather than trying to recover from failures and restart everything, the control plane just exits when an exception is thrown. This is more useful during development rather than in a production setting. For that reason, the flag is only enabled in the sample dev.toml config but not prod.toml.","category":"page"},{"location":"control_plane/#Quick-run","page":"Control Plane Design","title":"Quick run","text":"","category":"section"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"To run the control plane, make sure that the DISCORD_BOT_TOKEN environment variable is set.","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"Then, simply invoke the following function:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"serve()","category":"page"},{"location":"control_plane/#Operating-the-control-plane","page":"Control Plane Design","title":"Operating the control plane","text":"","category":"section"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"The serve function actually takes a couple of keyword parameters if you want more customization:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"client: a BotClient object\ntracker_ref: a Ref that will be populated in with a GatewayTracker object when the control plane starts can start successfully.\nconfig_file_path: file path of the configuration file such as dev.toml or prod.toml. See etc/ directory for sample configurations.","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"After the control plane starts successfully, the GatewayTracker object represents the current state, including references to all tasks mentioned above.  Here's how to test from REPL:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"julia> D = Discorder\nDiscorder\n\njulia> tracker_ref = Ref{D.GatewayTracker}()\nBase.RefValue{Discorder.GatewayTracker}(#undef)\n\njulia> client = D.BotClient()\nBotClient(<token>, Discorder.RateLimiter(Dict{String, Discorder.Bucket}(), Dict{String, String}(), Discorder.WAIT))\n\njulia> @async D.serve(; client, tracker_ref, config_file_path = \"etc/dev.toml\")\nTask (runnable) @0x00000001092088b0","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"At this point, the log file should be filled with events data. Check the log file dev.log.","category":"page"},{"location":"control_plane/#Monitoring","page":"Control Plane Design","title":"Monitoring","text":"","category":"section"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"From the REPL, you can see what's going on with the control plane:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"julia> tracker_ref\nBase.RefValue{Discorder.GatewayTracker}(Discorder.GatewayTracker\n  websocket: HTTP.WebSockets.WebSocket{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}\n  heartbeat_interval_ms: Int64 41250\n  seq: Int64 3\n  heartbeat_task: Task\n  processor_task: Task\n  master_task: Task\n  doctor_task: Task\n  terminate_flag: Bool false\n  fail_on_error: Bool true\n  config: Dict{String, Any}\n  stats: Discorder.GatewayStats\n  publishers: Array{Discorder.AbstractEventPublisher}((0,))\n)","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"To check if the control plane is healthy, use the is_operational function:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"julia> D.is_operational(tracker_ref[])\ntrue","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"You can also see some server statistics:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"julia> tracker_ref[].stats\nDiscorder.GatewayStats\n  start_time: TimeZones.ZonedDateTime\n  ready_time: TimeZones.ZonedDateTime\n  event_count: Int64 23\n  published_event_count: Int64 9\n  heartbeat_sent_count: Int64 14\n  heartbeat_received_count: Int64 14","category":"page"},{"location":"control_plane/#Adding-publishers","page":"Control Plane Design","title":"Adding publishers","text":"","category":"section"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"The control plane isn't very useful if it doesn't communicate whenever gateway events are received, right? There are several publisher implementations in this package. See the publishers directory. For demo purpose, let's add a ZMQ publisher:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"julia> D.add_event_publisher(tracker_ref[], D.ZMQPublisher(6000))","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"Then, start a subscriber from the REPL:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"julia> using Sockets, ZMQ\n\njulia> begin\n           socket = Socket(SUB)\n           subscribe(socket, \"\")\n           connect(socket, \"tcp://localhost:6000\")\n           while true\n               msg = ZMQ.recv(socket) |> String\n               @info \"Received\" msg\n           end\n       end","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"Now, go to Discord and enter a text message. I just entered \"hello\". The ZMQ subscriber should display the event received from the publisher.","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"The wire format is just JSON and it contains the following top level fields:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"Event type e.g. MESSAGE_CREATE\nTimestamp e.g. 2022-09-11T16:17:41.535-07:00\nEvent payload","category":"page"},{"location":"control_plane/#Other-publishers","page":"Control Plane Design","title":"Other publishers","text":"","category":"section"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"For demo purpose, there are other publisher implementations:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"ChannelEventPublisher: publish events to a Channel\nDelimitedFileEventPublisher: publish events to a delimited file","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"Publishers should generally \"fire-and-forget\". However, please beware that if you use ChannelEventPublisher, then there is a possibility that the channel is full and you are blocked due to \"back-pressure\". For production usage, you can consider using the ZMQ publisher or implementing your own non-blocking publisher.","category":"page"},{"location":"control_plane/#Auto-recovery-from-task-failures","page":"Control Plane Design","title":"Auto-recovery from task failures","text":"","category":"section"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"The control plane can auto-recover after connectivity problems. Let's simulate such a problem with the processor task in the REPL:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"julia> @async Base.throwto(tracker_ref[].processor_task, ErrorException(\"simulated failure\"))\nTask (runnable) @0x000000016572a290","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"In the log file, you will find that it has detected the failure and started a new control plane:","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"┌ Info: Going to recover by starting a new control plane\n│   current_time = 2022-09-11T16:36:47.443-07:00\n└ @ Discorder /Users/tomkwong/.julia/dev/Discorder/src/gateway.jl:160","category":"page"},{"location":"control_plane/#Shutting-down-the-control-plane","page":"Control Plane Design","title":"Shutting down the control plane","text":"","category":"section"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"The shutdown function can be used to shut down the control plane gracefully.","category":"page"},{"location":"control_plane/","page":"Control Plane Design","title":"Control Plane Design","text":"julia> D.shutdown(tracker_ref[])","category":"page"},{"location":"commands/#High-level-commands-abstraction","page":"High level commands abstraction","title":"High level commands abstraction","text":"","category":"section"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"Working with gateway directly is powerful but it would be nicer if there's a command-based interface. Rather than parsing strings all the time and dispatching to some function, perhaps it would be better to allow registering commands & arguments, similar to how CLIs are implemented. Another thought is that slash commands should be supported somehow.","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"Let's use HoJ bot as example:","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":",tz yyyy-mm-dd hh:mm:ss\n,ig view\n,ig perf\n,ig chart aapl 2y\n,ig buy 100 ibm\n,ig sell 200 ibm\n,discourse latest\n,discourse traits","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"Most of these are handled by matching some regex. So maybe we can take the command name & regex captures as a \"command config\". Prefix should be auto handled as well.","category":"page"},{"location":"commands/#Decoupling-user-code","page":"High level commands abstraction","title":"Decoupling user code","text":"","category":"section"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"The control plane is designed to run independently from user code.","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"Technically, the project could have been decoupled as well into three components:","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"Discorder Core Library - define core structs and API interfaces to Discord\nDiscorder Server - control plane implementation\nDiscorder Bot - tools for building bots","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"For sake of simplicity, the source code lives in the same repo for now.","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"For deployment, however, the control plane and user code should run in separate Julia processes. Something like this:","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"bash run_control_plane.sh &\nbash run_hoj_bot.sh &","category":"page"},{"location":"commands/#Bot-API-design","page":"High level commands abstraction","title":"Bot API design","text":"","category":"section"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"The Bot API should support the following:","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"Configure a Bot\nRegister handlers to the Bot\nRun event loop","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"It should be possible to start an event loop and still make changes afterwards. For example, a bot may allow guild owners to enable/disable certain bot functionalities and therefore handlers may be added/removed at runtime based upon configurations from a web-based user interfaces. So, the above sequence is really just for illustrative purpose rather than being prescriptive.","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"Learning from existing packages, Xh4H's Discord.jl has two kinds of integration:","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"Command: invoke user code when someone types a message\nHandler: invokes user code some some kind of event happened e.g. reactions","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"Below is the current design.","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"First, create an instance of a bot. This object is used to keep track of the bot client as well as registered handlers. By default, the bot listens to port 6000 for ZMQ events. See control plane doc about how to publish events from the Gateway using ZMQ.","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"bot = Bot()","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"Registering a command handler involves a command prefix and a regex to recognize the command itself. There are always two arguments passed to the user function: 1) bot client 2) discord object for that event.","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"julia> register!(bot, CommandTrigger(',', r\"echo \")) do client, message\n           msg = strip(message.content[6:end])\n           @info \"message content = $msg\"\n           create_message(client, message.channel_id; content = \"$msg\")\n       end","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"For illustration purpose, here's how to register a reaction handler, which would be called whenever a reaction add event is triggered.","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"julia> register!(bot, ReactionAddTrigger()) do client, reaction_add_event\n           @info \"reaction event \" reaction_add_event.emoji\n       end","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"The bot must get into an event loop for processing. The run function can be used as such:","category":"page"},{"location":"commands/","page":"High level commands abstraction","title":"High level commands abstraction","text":"julia> play(bot)","category":"page"},{"location":"slash_commands/#Slash-commands","page":"Slash commands","title":"Slash commands","text":"","category":"section"},{"location":"slash_commands/","page":"Slash commands","title":"Slash commands","text":"TBD","category":"page"},{"location":"ideas/#Some-ideas","page":"Ideas","title":"Some ideas","text":"","category":"section"},{"location":"ideas/#Independent-gateway-and-bots-(DONE)","page":"Ideas","title":"Independent gateway and bots (DONE)","text":"","category":"section"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"The simplest architecture is to run both gateway and bot code in the same Julia runtime. This approach, as normally done with previous Discord.jl packages, has a number of drawbacks:","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"The gateway process may be affected and its loops may be delayed if the bot code runs anything computationally intensive and does not yield (since the gateway runs as an async task). This issue exists with existing Xh4h's Discord.jl package although it can possibly be remediated if the bot code consciously spawns a separate thread to handle its logic.\nIf the bot code is erratic and needs to be restarted then the entire gateway needs to be restarted as well. Such coupling is unfortunate because it requires connecting to Discord server again.\nIf there are multiple bot components then these components share the same namespace unless sub-modules are used. Also, if one bot component misbehaves then it might affect other bot components.","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"So the basic idea is to just decouple everything:","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"Gateway runs as a separate process and communicates events via ZMQ\nEach bot component runs as a separate process and receive events via ZMQ","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"So the gateway process can run forever and each bot component can start/stop whenever it comes to play. It is more scalable because gateway and bot components can technically run from a different container. In addition, it opens up the opportunity if you ever want to run the gateway process only but implement bot components using a different language/runtime.","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"A demonstration of this idea can be found in the example folder.","category":"page"},{"location":"ideas/#Declarative-bot-development","page":"Ideas","title":"Declarative bot development","text":"","category":"section"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"Perhaps a bot can be defined as a bunch of functions in a module? Just like web servers, these functions need to be annotated with route information. For simplicity reasons, macros matching Discord event types can be used to register functions.","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"Currently, you must register handlers like this:","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"register!(bot, CommandTrigger(r\",echo (.*)\")) do client, message, str\n    @info \"Echo handler\" str\n    create_message(client, message.channel_id;\n        content=\"ok, you said: $str\",\n        message_reference=MessageReference(message_id=message.id)\n    )\nend","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"It may be better to do this declaratively.","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"module MyBot\n\n@message_create r\",echo (.*)\" function echo(client, message, str)\n    @info \"echo content = $str\"\n    return create_message(client, message.channel_id; content=\"ok, you said: $str\")\nend\n\n@reaction_add r\"([😄,😸])\" function smile(client, emoji, emoji_name)\n    @info \"got smiley = $emoji_name\"\nend\n\nend # module MyBot","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"Once a bot module is defined, pass the module (or modules in an array) to the serve function:","category":"page"},{"location":"ideas/","page":"Ideas","title":"Ideas","text":"serve(MyBot, 6000; config_file_path=\"etc/dev.toml\")","category":"page"},{"location":"dev_guide/#Developer-Guide","page":"Dev Guide","title":"Developer Guide","text":"","category":"section"},{"location":"dev_guide/#Generating-BrokenRecord-data-files","page":"Dev Guide","title":"Generating BrokenRecord data files","text":"","category":"section"},{"location":"dev_guide/","page":"Dev Guide","title":"Dev Guide","text":"The test suite uses BrokenRecord.jl to capture HTTP responses so that subsequent tests can be executed more quickly (as well as being able to test in DevOps/CI without actually hitting the Discord server). If you change any tests, you must regenerate the BSON files in the test/fixtures directory.","category":"page"},{"location":"dev_guide/","page":"Dev Guide","title":"Dev Guide","text":"Here's how:","category":"page"},{"location":"dev_guide/","page":"Dev Guide","title":"Dev Guide","text":"Define environment variable DISCORD_BOT_TOKEN with your own bot's token\nDelete all BSON files in test/fixtures directory\nRun the test suite\nCommit and merge the changed BSON files","category":"page"},{"location":"dev_guide/#Productivity-tools","page":"Dev Guide","title":"Productivity tools","text":"","category":"section"},{"location":"dev_guide/","page":"Dev Guide","title":"Dev Guide","text":"Run the tools/check_includes.jl script to find out if any new source files are added to the src/objects but have not been included in the main objects.jl script.","category":"page"},{"location":"dev_guide/#Best-practices","page":"Dev Guide","title":"Best practices","text":"","category":"section"},{"location":"dev_guide/","page":"Dev Guide","title":"Dev Guide","text":"This library makes use of async processes heavily. Some best practices include:","category":"page"},{"location":"dev_guide/","page":"Dev Guide","title":"Dev Guide","text":"Always run async code within a try/catch block and 1) display the error when an exception occurs and 2) rethrow. Why? Because exceptions are by default not displayed to the console and the task just gets to a failed state.\nWhen you stop an async task using Base.throwto, you must run that with @async. It's needed because throwto function yields to a different task and never comes back to the current task.","category":"page"},{"location":"#User-Guide","page":"User guide","title":"User Guide","text":"","category":"section"},{"location":"","page":"User guide","title":"User guide","text":"Discorder.jl provides an easy way to write Discord bots in Julia.","category":"page"},{"location":"#Control-Plane","page":"User guide","title":"Control Plane","text":"","category":"section"},{"location":"","page":"User guide","title":"User guide","text":"The control plane (which implements Discord Gateway interface) runs as an standalone process. It maintains a live connection to Discord and keeps a heartbeat process. It listens to events from Discord, for example, people sending messages or reacting to a message. It's primary duty is to publish these events to a ZMQ pub/sub channel. Starting the control plane server is simple:","category":"page"},{"location":"","page":"User guide","title":"User guide","text":"port = 6000\ncfg = \"etc/dev.toml\"\nserve(config_file_path=cfg, publisher=ZMQPublisher(port))","category":"page"},{"location":"#Bot-code","page":"User guide","title":"Bot code","text":"","category":"section"},{"location":"","page":"User guide","title":"User guide","text":"User code that runs bot custom logic can subscribe to the gateway events and register for specific patterns. For example, an \"echo\" bot can be written easily as such:","category":"page"},{"location":"","page":"User guide","title":"User guide","text":"port = 6000\nbot = Bot()\n\nregister!(bot, CommandTrigger(r\",echo (.*)\")) do client, message, str\n    create_message(client, message.channel_id;\n        content=\"ok, you said: $str\",\n        message_reference=MessageReference(message_id=message.id)\n    )\nend\n\nstart(bot, port)","category":"page"},{"location":"","page":"User guide","title":"User guide","text":"See example folder for the complete code and more bot examples.","category":"page"}]
}
